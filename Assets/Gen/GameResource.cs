//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class GameResource :  Bright.Config.BeanBase 
{
    public GameResource(JSONNode _json) 
    {
        { if(!_json["ResourceId"].IsNumber) { throw new SerializationException(); }  ResourceId = _json["ResourceId"]; }
        { if(!_json["IsInherit"].IsBoolean) { throw new SerializationException(); }  IsInherit = _json["IsInherit"]; }
        { if(!_json["Desc"].IsString) { throw new SerializationException(); }  Desc = _json["Desc"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { if(!_json["ResourceType"].IsNumber) { throw new SerializationException(); }  ResourceType = (ResourceType)_json["ResourceType"].AsInt; }
        { var __json0 = _json["Effects"]; if(!__json0.IsArray) { throw new SerializationException(); } Effects = new System.Collections.Generic.List<EventEffect>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EventEffect __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = EventEffect.DeserializeEventEffect(__e0);  }  Effects.Add(__v0); }   }
        { if(!_json["IsUsable"].IsBoolean) { throw new SerializationException(); }  IsUsable = _json["IsUsable"]; }
        { var __json0 = _json["UsedEffect"]; if(!__json0.IsArray) { throw new SerializationException(); } UsedEffect = new System.Collections.Generic.List<EventEffect>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EventEffect __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = EventEffect.DeserializeEventEffect(__e0);  }  UsedEffect.Add(__v0); }   }
        { var __json0 = _json["EndingPara"]; if(!__json0.IsArray) { throw new SerializationException(); } EndingPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  EndingPara.Add(__v0); }   }
        { var __json0 = _json["ResourceTags"]; if(!__json0.IsArray) { throw new SerializationException(); } ResourceTags = new System.Collections.Generic.List<ResourceTag>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { ResourceTag __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (ResourceTag)__e0.AsInt; }  ResourceTags.Add(__v0); }   }
        { if(!_json["ResourceImage"].IsString) { throw new SerializationException(); }  ResourceImage = _json["ResourceImage"]; }
        PostInit();
    }

    public GameResource(int ResourceId, bool IsInherit, string Desc, string Name, ResourceType ResourceType, System.Collections.Generic.List<EventEffect> Effects, bool IsUsable, System.Collections.Generic.List<EventEffect> UsedEffect, System.Collections.Generic.List<int> EndingPara, System.Collections.Generic.List<ResourceTag> ResourceTags, string ResourceImage ) 
    {
        this.ResourceId = ResourceId;
        this.IsInherit = IsInherit;
        this.Desc = Desc;
        this.Name = Name;
        this.ResourceType = ResourceType;
        this.Effects = Effects;
        this.IsUsable = IsUsable;
        this.UsedEffect = UsedEffect;
        this.EndingPara = EndingPara;
        this.ResourceTags = ResourceTags;
        this.ResourceImage = ResourceImage;
        PostInit();
    }

    public static GameResource DeserializeGameResource(JSONNode _json)
    {
        return new GameResource(_json);
    }

    /// <summary>
    /// 资源类型
    /// </summary>
    public int ResourceId { get; private set; }
    /// <summary>
    /// 是否继承
    /// </summary>
    public bool IsInherit { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 资源类型
    /// </summary>
    public ResourceType ResourceType { get; private set; }
    /// <summary>
    /// 效果
    /// </summary>
    public System.Collections.Generic.List<EventEffect> Effects { get; private set; }
    /// <summary>
    /// 可使用
    /// </summary>
    public bool IsUsable { get; private set; }
    /// <summary>
    /// 使用效果
    /// </summary>
    public System.Collections.Generic.List<EventEffect> UsedEffect { get; private set; }
    /// <summary>
    /// 结局参数补正
    /// </summary>
    public System.Collections.Generic.List<int> EndingPara { get; private set; }
    /// <summary>
    /// 资源特性
    /// </summary>
    public System.Collections.Generic.List<ResourceTag> ResourceTags { get; private set; }
    /// <summary>
    /// 资源图片名
    /// </summary>
    public string ResourceImage { get; private set; }

    public const int __ID__ = -21514688;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Effects) { _e?.Resolve(_tables); }
        foreach(var _e in UsedEffect) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Effects) { _e?.TranslateText(translator); }
        foreach(var _e in UsedEffect) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "ResourceId:" + ResourceId + ","
        + "IsInherit:" + IsInherit + ","
        + "Desc:" + Desc + ","
        + "Name:" + Name + ","
        + "ResourceType:" + ResourceType + ","
        + "Effects:" + Bright.Common.StringUtil.CollectionToString(Effects) + ","
        + "IsUsable:" + IsUsable + ","
        + "UsedEffect:" + Bright.Common.StringUtil.CollectionToString(UsedEffect) + ","
        + "EndingPara:" + Bright.Common.StringUtil.CollectionToString(EndingPara) + ","
        + "ResourceTags:" + Bright.Common.StringUtil.CollectionToString(ResourceTags) + ","
        + "ResourceImage:" + ResourceImage + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
